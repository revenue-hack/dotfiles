[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
[[plugins]]
repo = 'scrooloose/nerdtree'
[[plugins]]
repo = 'tomasr/molokai'
[[plugins]]
repo = 'GutenYe/json5.vim'
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'md', 'rmd'],
hook_post_update = '''
cd app & yarn install
'''
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
" Go用LSP
if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif

" Typescript用LSP
if executable('typescript-language-server')
    augroup LspTypeScript
        au!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'typescript-language-server',
                    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
                    \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
                    \ 'whitelist': ['typescript'],
                    \ })
        autocmd FileType typescript setlocal omnifunc=lsp#complete
    augroup END :echomsg "vim-lsp with `typescript-language-server` enabled"
else
    :echomsg "vim-lsp for typescript unavailable"
endif

" Ruby用LSP
if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif

" PHP用のLSP
if executable('intelephense')
  augroup LspPHPIntelephense
  au!
  au User lsp_setup call lsp#register_server({
      \ 'name': 'intelephense',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
      \ 'whitelist': ['php'],
      \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
      \ 'workspace_config': {
      \   'intelephense': {
      \     'files': {
      \       'maxSize': 1000000,
      \       'associations': ['*.php', '*.phtml'],
      \       'exclude': [],
      \     },
      \     'completion': {
      \       'insertUseDeclaration': v:true,
      \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
      \       'triggerParameterHints': v:true,
      \       'maxItems': 100,
      \     },
      \     'format': {
      \       'enable': v:true
      \     },
      \   },
      \ }
      \})
  augroup END
endif

au FileType * nmap <silent> <Tab>[ :LspDefinition<CR>
au FileType * nmap <silent> <Tab>h :LspHover<CR>
au FileType * nmap <silent> <Tab>r :LspReferences<CR>
au FileType * nmap <silent> <Tab>i :LspImplementation<CR>
au FileType * nmap <silent> <Tab>] :split \| :LspDefinition <CR>
au FileType * nmap <silent> <Tab>v :vsplit \| :LspDefinition <CR>
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '!!'}
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_ft = ['vim', 'go']
hook_add = '''
let g:asyncomplete_log_file = expand('~/.cache/tmp/asyncomplete.log')
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['go']
depends = ['asyncomplete.vim', 'vim-lsp']

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-snippets'
hook_add = '''
'''

