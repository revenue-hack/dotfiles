[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'scrooloose/nerdtree'
[[plugins]]
repo = 'tomasr/molokai'
[[plugins]]
repo = 'GutenYe/json5.vim'
[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = ['go']
hook_add = '''
autocmd FileType go nmap dbp :DlvAddBreakpoint<CR>
autocmd FileType go nmap dtp :DlvAddTracepoint<CR>
autocmd FileType go nmap dt :DlvTest<CR>
autocmd FileType go nmap dc :DlvClearAll<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
autocmd FileType go nmap gtj :CocCommand go.tags.add json<cr>
autocmd FileType go nmap gty :CocCommand go.tags.add yaml<cr>
autocmd FileType go nmap gtx :CocCommand go.tags.clear<cr>
" function! s:GoToDefinition()
"   if CocAction('jumpDefinition')
"     return v:true
"   endif
"
"   let ret = execute("silent! normal \<C-]>")
"   if ret =~ "Error" || ret =~ "错误"
"     call searchdecl(expand('<cword>'))
"   endif
" endfunction
nmap <silent> <Tab>[ <Plug>(coc-definition)
nmap <silent> cn <Plug>(coc-rename)
nmap <silent> T <Plug>(coc-type-definition)
nmap <silent> I <Plug>(coc-implementation)
nmap <silent> R <Plug>(coc-references)
" nmap <silent> <Tab>] :split \| :call <SID>GoToDefinition()<CR>
nmap <silent> <Tab>] :call CocAction('jumpDefinition', 'split')<CR>

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm(): "\<CR>"
inoremap <expr><Up> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <expr><Down> coc#pum#visible() ? coc#pum#next(1) : "\<C-h>"

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

""inoremap <silent><expr> <TAB>
""      \ coc#pum#visible() ? joc#pum#next(1) :
""      \ CheckBackspace() ? "\<TAB>" :
""      \ coc#refresh()
"inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
"inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
"if exists('*complete_info')
"  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"else
"  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"endif
'''


#[[plugins]]
#repo = "tbodt/deoplete-tabnine"
#build = "./install.sh"
#on_fmt = ["*"]

#[[plugins]]
#repo = 'prabirshrestha/vim-lsp'
#depends = ['async.vim']
#hook_add = '''
#
#" Go用LSP
#if executable('gopls')
#  augroup LspGo
#    au!
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'gopls',
#        \ 'cmd': {server_info->['gopls']},
#        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'go.mod'))},
#        \ 'whitelist': ['go'],
#        \ })
#    autocmd BufWritePre *.go LspDocumentFormatSync
#  augroup END
#endif
#
#" Python用LSP
#if (executable('pyls'))
#    " pylsの起動定義
#    augroup LspPython
#        autocmd!
#        autocmd User lsp_setup call lsp#register_server({
#            \ 'name': 'pyls',
#            \ 'cmd': { server_info -> ['pyls'] },
#            \ 'whitelist': ['python'],
#            \})
#    augroup END
#endif
#
#" Typescript用LSP
#if executable('typescript-language-server')
#    augroup LspTypeScript
#        au!
#        autocmd User lsp_setup call lsp#register_server({
#                    \ 'name': 'typescript-language-server',
#                    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
#                    \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
#                    \ 'whitelist': ['typescript', 'typescript.tsx'],
#                    \ })
#        autocmd FileType typescript setlocal omnifunc=lsp#complete
#    augroup END :echomsg "vim-lsp with `typescript-language-server` enabled"
#else
#    :echomsg "vim-lsp for typescript unavailable"
#endif
#
#" SQL
#if executable('sql-language-server')
#    augroup LspSQL
#      au!
#      autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'sql-language-server',
#          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'sql-language-server up --method stdio']},
#          \ 'whitelist': ['sql'],
#          \ })
#    augroup END
#endif
#
#" Ruby用LSP
#if executable('solargraph')
#    " gem install solargraph
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'solargraph',
#        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
#        \ 'initialization_options': {"diagnostics": "true"},
#        \ 'whitelist': ['ruby'],
#        \ })
#endif
#
#" PHP用のLSP
#if executable('intelephense')
#  augroup LspPHPIntelephense
#  au!
#  au User lsp_setup call lsp#register_server({
#      \ 'name': 'intelephense',
#      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
#      \ 'whitelist': ['php'],
#      \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
#      \ 'workspace_config': {
#      \   'intelephense': {
#      \     'files': {
#      \       'maxSize': 1000000,
#      \       'associations': ['*.php', '*.phtml'],
#      \       'exclude': [],
#      \     },
#      \     'completion': {
#      \       'insertUseDeclaration': v:true,
#      \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
#      \       'triggerParameterHints': v:true,
#      \       'maxItems': 100,
#      \     },
#      \     'format': {
#      \       'enable': v:true
#      \     },
#      \   },
#      \ }
#      \})
#  augroup END
#endif
#
#if executable('terraform-lsp')
#  augroup LspTerraform
#    au!
#    au User lsp_setup call lsp#register_server({
#      \ 'name': 'terraform-lsp',
#      \ 'cmd': {server_info->['terraform-lsp']},
#      \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), '.terraform'))},
#      \ 'whitelist': ['terraform','tf'],
#      \ })
#  augroup END
#endif
#
#if executable('vls')
#  augroup LspVls
#    au!
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'vue-language-server',
#        \ 'cmd': {server_info->['vls']},
#        \ 'whitelist': ['vue'],
#        \ 'initialization_options': {
#        \         'config': {
#        \             'html': {'suggest': v:true},
#        \             'vetur': {
#        \                 'validation': {'template': v:true, 'script': v:true, 'style': v:true},
#        \                 'completion': {'tagCasing': 'initial'}
#        \             }
#        \         }
#        \     }
#        \ })
#
#    " omnifunc
#    au FileType vue setlocal omnifunc=lsp#complete
#  augroup END
#endif
#
#if executable('docker-langserver')
#  augroup LspDocker
#  au!
#  au User lsp_setup call lsp#register_server({
#      \ 'name': 'docker-langserver',
#      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
#      \ 'whitelist': ['dockerfile'],
#      \ })
#  augroup END
#endif
#
#if executable('bash-language-server')
#  augroup LspBash
#    au!
#    au User lsp_setup call lsp#register_server({
#      \ 'name': 'bash-language-server',
#      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
#      \ 'whitelist': ['sh'],
#    \ })
#  augroup END
#endif
#
#if executable('vim-language-server')
#  augroup LspVim
#    au!
#    au User lsp_setup call lsp#register_server({
#      \ 'name': 'vim-language-server',
#      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'vim-language-server --stdio']},
#      \ 'whitelist': ['vim'],
#    \ })
#  augroup END
#endif
#
#
#au FileType * nmap <silent> <Tab>[ :LspDefinition<CR>
#au FileType * nmap <silent> <Tab>h :LspHover<CR>
#au FileType * nmap <silent> <Tab>r :LspReferences<CR>
#au FileType * nmap <silent> <Tab>i :LspImplementation<CR>
#au FileType * nmap <silent> <Tab>] :split \| :LspDefinition <CR>
#au FileType * nmap <silent> <Tab>v :vsplit \| :LspDefinition <CR>
#let g:lsp_signs_error = {'text': '✗'}
#let g:lsp_signs_warning = {'text': '!!'}
#let g:lsp_signs_enabled = 1
#let g:lsp_diagnostics_echo_cursor = 1
#let g:lsp_log_file = expand('~/.cache/tmp/vim-lsp.log')
#'''

#[[plugins]]
#repo = 'prabirshrestha/asyncomplete.vim'
#on_ft = ['*']
#depends = ['async.vim']
#hook_add = '''
#let g:asyncomplete_log_file = expand('~/.cache/tmp/asyncomplete.log')
#inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
#'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
let g:fzf_action = {
  \ 'ctrl-s': 'split' }

nnoremap <silent><C-p> :Files<CR>
nnoremap <C-q> :Buffers<CR>
nnoremap <C-g> :Rg<CR>

let $FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git/**' --glob '!*/node_modules/*'"

let g:fzf_buffers_jump = 1
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
'''

#[[plugins]]
#repo = 'mattn/vim-lsp-settings'
#depends = ['async.vim', 'asyncomplete.vim', 'vim-lsp', 'asyncomplete-lsp.vim']

